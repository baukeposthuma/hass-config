rest:
  - authentication: basic
    username: !secret github_username
    password: !secret github_access_token
    resource: https://api.github.com/repos/esphome/esphome/releases/latest
    sensor:
      name: updates_esphome_latest
      value_template: >
        {{ value_json.tag_name }}
    scan_interval: 86400

  - resource: https://api.github.com/repos/home-assistant/core/releases/latest
    sensor:
      name: hass_release_notes
      value_template: >
        {{ value_json.name }}
      json_attributes:
        - body
    scan_interval: 21600

  - resource: https://api.github.com/repos/home-assistant/core/releases?per_page=1
    sensor:
      name: hass_release_notes_beta
      value_template: >
        {{ value_json[0].name }}
      json_attributes:
        - body
    scan_interval: 21600

template:
  - sensor:
      - unique_id: hass_next_release
        state: >
          {% set start_time = state_attr('calendar.home_assistant_devs', 'start_time') %}
          {{ (as_timestamp(start_time, default=0) + 60*60*20.5) | timestamp_local(default) }}
        attributes:
          friendly_name: >
            {% set release = state_attr('calendar.home_assistant_devs','message') %}
            {% if release == 'Home Assistant Core Beta Release' %}
              Volgende beta
            {% elif release == 'Home Assistant Core Release' %}
              Volgende release
            {% else %}
              {{ release }}
            {% endif %}
          icon: mdi:dev-to
          device_class: timestamp

      - unique_id: updates
        state: >
          {% set ns = namespace(list=[]) %}
          {% for k, v in this.attributes | dictsort(by='value') %}
            {% set ns.list = ns.list + [v] if v != '' else [] %}
          {% endfor %}
          {{ ns.list | count }}
        attributes:
          esphome: >
            {% macro f(e) %}
              {{- states('sensor.gosund_' + e + '_esphome_version') -}}
            {% endmacro %}
            {% set group = [f('monitors'), f('ac'), f('fan')] | min %}
            {% set installed = group.split()[0] %}
            {% set latest = states('sensor.updates_esphome_latest') %}
            {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
            {% if installed != latest %}
              <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
            {% endif %}
          unifi: >
            {% set installed = state_attr('update.unifi_dream_machine', 'installed_version') %}
            {% set latest = state_attr('update.unifi_dream_machine', 'latest_version') %}
            {% set url = 'https://community.ui.com/releases?q=dream+machine' %}
            {% if is_state('update.unifi_dream_machine', 'on') %}
              <b><a href="#" onclick="window.open('{{ url }}');">UniFi Dream Machine {{ installed + ' <b>&rarr;</b> ' + latest }}
            {% endif %}
          synology: >
            {% set installed = state_attr('update.nas_dsm_update', 'installed_version') %}
            {% set latest = state_attr('update.nas_dsm_update', 'latest_version') %}
            {% set url = state_attr('update.nas_dsm_update', 'release_url') %}
            {% if is_state('update.nas_dsm_update', 'on') %}
              <b><a href="#" onclick="window.open('{{ url }}');">Synology DSM</a></b> {{ installed + ' <b>&rarr;</b> ' + latest }}
            {% endif %}

sensor:
  - platform: command_line
    name: hacs_installed
    command: |-
      python3 << EOF
      import os, json
      installed = {"repositories": []}
      PATH = "/config/.storage/hacs.repositories"
      with open(PATH, "r", encoding="UTF-8") as file:
          data = json.load(file)["data"]
          for i in data:
              if "installed" in data[i]:
                  installed["repositories"] += [data[i]["full_name"]]
          file.close()
      print(json.dumps(installed))
      EOF
    value_template: >
      {{ value_json.repositories | count }}
    json_attributes:
      - repositories
    scan_interval: 86400
